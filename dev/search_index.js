var documenterSearchIndex = {"docs":
[{"location":"api/#Exports-1","page":"API","title":"Exports","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [RANSAC]\nPrivate = false","category":"page"},{"location":"api/#RANSAC.FittedShape","page":"API","title":"RANSAC.FittedShape","text":"An abstract type that wraps the fitted shapes.\n\n\n\n\n\n","category":"type"},{"location":"api/#RANSAC.PointCloud-NTuple{4,Any}","page":"API","title":"RANSAC.PointCloud","text":"PointCloud(vertices, normals, subsets, isenabled)\n\nConstruct a PointCloud with filling it's size and levelweight fields.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.PointCloud-NTuple{7,Any}","page":"API","title":"RANSAC.PointCloud","text":"PointCloud(vertices, normals, subsets, isenabled, size, levelweight, levelscore)\n\nConstructor that converts vertices and normals to array of SVector{3,Float64}.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.PointCloud-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.PointCloud","text":"PointCloud(vertices, normals, subsets)\n\nConstruct a PointCloud, filling it's other fields.\n\nEvery point is enabled, and the weight vector defaults to [1.0].\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.PointCloud-Tuple{Any,Any,Int64}","page":"API","title":"RANSAC.PointCloud","text":"PointCloud(vertices, normals, numofsubsets::Int)\n\nConstruct a PointCloud with numofsubsets random subsets.\n\nEvery point is enabled, and the weight vector defaults to [1.0].\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.E-Tuple{ConfidenceInterval}","page":"API","title":"RANSAC.E","text":"E(x::ConfidenceInterval)\n\nExpected value of a ConfidenceInterval.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.arbitrary_orthogonal-Tuple{Any}","page":"API","title":"RANSAC.arbitrary_orthogonal","text":"arbitrary_orthogonal(vec)\n\nCreate an arbitrary orthogonal vector to vec.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.arbitrary_orthogonal2-Tuple{Any}","page":"API","title":"RANSAC.arbitrary_orthogonal2","text":"arbitrary_orthogonal2(vec)\n\nCreate an arbitrary orthogonal vector to vec.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.dn2contour-Tuple{Any,Any}","page":"API","title":"RANSAC.dn2contour","text":"dn2contour(point, contour)\n\nDistance: distance from the nearest point of the contour point.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.dn2shape_contour-Tuple{Any,Any}","page":"API","title":"RANSAC.dn2shape_contour","text":"dn2shape_contour(point, shape)\n\nDistance: distance from the nearest point of the shape.contour point. Use in RANSAC.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.dn2shape_outw-Tuple{Any,Any}","page":"API","title":"RANSAC.dn2shape_outw","text":"dn2shape_outw(point, shape)\n\nDistance: distance from the nearest point of the shape.contour point. Normal points always outwards. Use in CSG.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.examplepc2","page":"API","title":"RANSAC.examplepc2","text":"examplepc2(nois = false; all = false, mrotdeg = 10, vertscale = 0.5)\n\nGenerate a definitely not random example consisting planes and spheres.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.examplepc3","page":"API","title":"RANSAC.examplepc3","text":"examplepc3(nois = false; all = false, mrotdeg = 10, vertscale = 0.5)\n\nGenerate a definitely not random example consisting planes and spheres.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.examplepc6","page":"API","title":"RANSAC.examplepc6","text":"examplepc6(nois = false; all = false, mrotdeg = 10, vertscale = 0.5)\n\nGenerate a definitely not random example consisting planes and spheres.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.findAABB-Tuple{Any}","page":"API","title":"RANSAC.findAABB","text":"findAABB(points)\n\nFind the axis aligned minimum bounding box of the given pointcloud.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.findhighestscore-Tuple{Any}","page":"API","title":"RANSAC.findhighestscore","text":"findhighestscore(A)\n\nFind the largest expected value in an array of ScoredShapes.\n\nIndicate if there's an overlap.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.getcellandparents-Tuple{RegionTrees.Cell}","page":"API","title":"RANSAC.getcellandparents","text":"getcellandparents(cell::Cell)\n\nCollect the cell and it's parents into an array.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.havesameelement-Tuple{Any,Any}","page":"API","title":"RANSAC.havesameelement","text":"havesameelement(A, B)\n\nReturn true if A and B have at least one common element.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.isoverlap-Union{Tuple{A}, Tuple{A,A}} where A<:ConfidenceInterval","page":"API","title":"RANSAC.isoverlap","text":"isoverlap(i1::A, i2::A) where {A<:ConfidenceInterval}\n\nTest if the two ConfidenceIntervals are overlapping.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.isparallel-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.isparallel","text":"isparallel(v1, v2, alpharad)\n\nCheck if v1 and v2 are parallel in an alpharad angle and point towards the same direction.\n\nThe vectors considered to be normalized.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.iswithinrectangle-Tuple{RegionTrees.HyperRectangle,Any}","page":"API","title":"RANSAC.iswithinrectangle","text":"iswithinrectangle(rect::HyperRectangle, p)\n\nDecide if p (3 dimensional point) is within rect.\n\nWorks only with those prisms which axes are aligned with the coordinate frame. \"Bottom/left\" gives false and \"top/right\" gives true.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.largestshape-Tuple{Any}","page":"API","title":"RANSAC.largestshape","text":"largestshape(A)\n\nFind the largest shape in an array of ScoredShapes.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.makemeanexample","page":"API","title":"RANSAC.makemeanexample","text":"makemeanexample(nois = false; all = false)\n\nGenerate a definitely not random example.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.noisifynormals-Tuple{Any,Any}","page":"API","title":"RANSAC.noisifynormals","text":"noisifynormals(norms, maxrot)\n\nAdd gaussian noise to normals. Rotates the normals around a random axis with maxrot degrees.\n\nArguments:\n\nmaxrot::Real: maximum rotation in degrees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.noisifyvertices","page":"API","title":"RANSAC.noisifyvertices","text":"noisifyvertices(verts, allvs, scalef = 1)\n\nAdd gaussian noise to vertices. Random subset or all vertices can be selected.\n\nArguments:\n\nallvs::Bool: adds noise to every vertice if true.\nscalef::Real: scale the noise from the [-1,1] interval.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.normalsforplot","page":"API","title":"RANSAC.normalsforplot","text":"normalsforplot(verts, norms, arrowsize = 0.5)\n\nCreate an array of pair of points for plotting the normals with Makie. Only the direction of the normals is presented, their size not.\n\nArguments:\n\narrowsize: scaling factor for the size of the lines.\n\n\n\n\n\n","category":"function"},{"location":"api/#RANSAC.notsoconfident-Tuple{Any,Any}","page":"API","title":"RANSAC.notsoconfident","text":"notsoconfident(x, y)\n\nReturn with a new ConfidenceInterval parameterized correctly with x and y.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.prob-NTuple{4,Any}","page":"API","title":"RANSAC.prob","text":"prob(n, s, N, k)\n\nThe probability of successful detection of a shape sized n, from a point cloud size of N, with k size of minimal sets and s draws.\n\nArguments:\n\nn: size of the shape.\ns: number of candidates that have been drawn.\nN: size of the point cloud.\nk: size of the minimal set required to define a shape candidate.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.project2plane-Tuple{Any,Any}","page":"API","title":"RANSAC.project2plane","text":"project2plane(plane, points)\n\nProject points on to the plane.\n\nArguments:\n\n'plane::FittedPlane': a plane.\n'points::AbstractArray': an array of points (array-of-arrays).\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.refitcylinder-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.refitcylinder","text":"refit(s, pc, ϵ, α)\n\nRefit cylinder. Only s.inpoints is updated.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.refitplane-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.refitplane","text":"refit(s, pc, ϵ, α)\n\nRefit plane. Only s.inpoints is updated.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.refitsphere-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.refitsphere","text":"refit(s, pc, ϵ, α)\n\nRefit sphere. Only s.inpoints is updated.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.rerunleftover!-NTuple{4,Any}","page":"API","title":"RANSAC.rerunleftover!","text":"rerunleftover!(pc, nofs, params, sofarextr; reset_rand=true)\n\nFor example: rerunleftover(pcr, 4, p, extr, reset_rand=true). It modifies the list of extracted candidates (sofarextr) and pointcloud.isenabled.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.rodriguesdeg-Tuple{Any,Any}","page":"API","title":"RANSAC.rodriguesdeg","text":"rodriguesdeg(nv, ϑ)\n\nCreate a rotation matrix from an axis (nv) and an angle (ϑ) in degrees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.rodriguesrad-Tuple{Any,Any}","page":"API","title":"RANSAC.rodriguesrad","text":"rodriguesrad(nv, ϑ)\n\nCreate a rotation matrix from an axis (nv) and an angle (ϑ) in radians.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.samplecylinder-NTuple{5,Any}","page":"API","title":"RANSAC.samplecylinder","text":"samplecylinder(ax, vp, R, h, sizet)\n\nCreate a tuple of points on a cylinder and their normals based on an axis (ax), a nullpoint (vp), radius and height.\n\nArguments:\n\nax: axis of the cylinder.\nvp: nullpoint of the cylinder.\nR: radius of the cylinder.\nh: height of the cylinder.\nsizet: tuple containing the number of samples along the circumference and the height.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.sampleplane-NTuple{4,Any}","page":"API","title":"RANSAC.sampleplane","text":"sampleplane(vp, n, lengtht, sizet)\n\nCreate a tuple of points on a plane and their normals based on a point (vp) and a surface normal (n).\n\nArguments:\n\nvp: a point of the plane.\nn: surface normal.\nsizet: tuple containing the number of samples along each side.\nlengtht: tuple containing the length of the plane along each side.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.sampleplane-NTuple{5,Any}","page":"API","title":"RANSAC.sampleplane","text":"sampleplane(vp, v1, v2, lengtht, sizet)\n\nCreate a tuple of points on a plane and their normals based on a point (vp) and two vectors (v1, v2).\n\nArguments:\n\nvp: a point of the plane.\nv1, v2: two vectors that define a plane.\nsizet: tuple containing the number of samples along each side.\nlengtht: tuple containing the length of the plane along each side.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.samplesphere-Tuple{Any,Any,Any}","page":"API","title":"RANSAC.samplesphere","text":"samplesphere(cp, R, sizet)\n\nCreate a tuple of points on a sphere and their normals.\n\nArguments:\n\ncp: centerpoint of sphere.\nR: radius of the sphere.\nsizet: tuple containing the number of samples along two great circles.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.smallestdistance-Tuple{Any}","page":"API","title":"RANSAC.smallestdistance","text":"smallestdistance(points)\n\nFind the smallest distance between the points.\n\n\n\n\n\n","category":"method"},{"location":"api/#RANSAC.unitdisk2square-Tuple{Any}","page":"API","title":"RANSAC.unitdisk2square","text":"unitdisk2square(p)\n\nTransform point on unit disk to unit sqaure.\n\nMaps a unit circle to a unit sqaure [0,1]^2. Source: shirley1997 - A low distortion map between disk and square\n\n\n\n\n\n","category":"method"},{"location":"#RANSAC.jl-1","page":"RANSAC.jl","title":"RANSAC.jl","text":"","category":"section"},{"location":"#","page":"RANSAC.jl","title":"RANSAC.jl","text":"This package implements the efficient RANSAC algorithm for point clouds. Paper can be found here.","category":"page"},{"location":"#","page":"RANSAC.jl","title":"RANSAC.jl","text":"R. Schnabel, R. Wahl, R. Klein \t\"Efficient RANSAC for Point-Cloud Shape Detection\", \tin Computer Graphics Forum, Vol. 26, No. 2, pages 214-226, \tBlackwell Publishing, June 2007","category":"page"},{"location":"#Efficient-RANSAC-1","page":"RANSAC.jl","title":"Efficient RANSAC","text":"","category":"section"},{"location":"#","page":"RANSAC.jl","title":"RANSAC.jl","text":"The efficient RANSAC algorithm is used to detect primitive shapes in point clouds. Primitive shapes can be: plane, sphere, cylinder, cone and torus, though torus is not implemented yet.","category":"page"},{"location":"#","page":"RANSAC.jl","title":"RANSAC.jl","text":"The input of the algorithm is a point cloud with associated surface normals. The output is a set of primitive shapes with corresponding sets of points, and the rest of the points that do not belong to any primitives.","category":"page"}]
}
